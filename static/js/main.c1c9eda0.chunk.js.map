{"version":3,"sources":["components/Controls/Controls.module.css","utils/timeFromat.js","components/Controls/Controls.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","setTimeFormat","totalSecs","seconds","minutes","Math","floor","hours","hoursFormat","minutesFormat","secondsFormant","Controls","time","start","stop","reset","wait","className","s","header","container","type","button","onClick","App","useState","state","setState","setTime","stop$","useMemo","Subject","click$","useCallback","next","useEffect","doubleClick$","pipe","buffer","debounceTime","map","list","length","filter","value","subscribtion$","Observable","observer","count","intervalId","setInterval","console","log","clearInterval","takeUntil","subscribe","prev","unsubscribe","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,OAAS,yBAAyB,UAAY,4BAA4B,OAAS,2B,sICgBtFC,EAjBO,SAAAC,GACpB,IAAMC,EAAUD,EAAY,GACtBE,EAAUC,KAAKC,MAAMJ,EAAY,IACjCK,EAAQF,KAAKC,MAAMJ,EAAY,MAC/BM,EACJD,EAAQ,GAAKA,EAAQ,GACjB,KACAA,GAAS,GAAKA,GAAS,EAAvB,WACIA,GADJ,UAEGA,GACHE,EACJL,EAAU,GAAkB,IAAZA,EAAgB,KAAhB,WAA2BA,GAA3C,UAA2DA,GACvDM,EAAiBP,EAAU,GAAV,WAAmBA,GAAnB,UAAkCA,GAEzD,MAAM,GAAN,OAAUK,EAAV,YAAyBC,EAAzB,YAA0CC,I,wBCT/BC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,KAA7B,OACtB,qCACE,yBAAQC,UAAWC,IAAEC,OAArB,UACE,2CACA,6BAAKlB,EAAcW,QAErB,kCACE,sBAAKK,UAAWC,IAAEE,UAAlB,UACE,wBAAQC,KAAK,SAASJ,UAAWC,IAAEI,OAAQC,QAASV,EAApD,mBAGA,wBAAQQ,KAAK,SAASJ,UAAWC,IAAEI,OAAQC,QAAST,EAApD,kBAGA,wBAAQO,KAAK,SAASJ,UAAWC,IAAEI,OAAQC,QAASR,EAApD,mBAGA,wBAAQM,KAAK,SAASJ,UAAWC,IAAEI,OAAQC,QAASP,EAApD,2B,6DCyDOQ,MAzEf,WACE,MAA0BC,mBAAS,QAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,GAAjC,mBAAOb,EAAP,KAAagB,EAAb,KAEMC,EAAQC,mBAAQ,kBAAM,IAAIC,MAAW,IACrCC,EAASF,mBAAQ,kBAAM,IAAIC,MAAW,IAMtCjB,EAAOmB,uBAAY,WACvBL,EAAQ,GACRD,EAAS,UACR,IAEGZ,EAAQkB,uBAAY,WACxBL,EAAQ,KACP,IAEGZ,EAAOiB,uBAAY,WACvBD,EAAOE,OACPP,EAAS,QACTK,EAAOE,SACN,CAACF,IAoCJ,OAlCAG,qBAAU,WACR,IAAMC,EAAeJ,EAAOK,KAC1BC,YAAON,EAAOK,KAAKE,YAAa,OAChCC,aAAI,SAAAC,GAAI,OAAIA,EAAKC,UACjBC,aAAO,SAAAC,GAAK,OAAIA,GAAS,MAerBC,EAbS,IAAIC,KAAW,SAAAC,GAC5B,IAAIC,EAAQ,EAENC,EAAaC,aAAY,WAC7BH,EAASb,KAAMc,GAAS,GACxBG,QAAQC,IAAIJ,KACX,KAEH,OAAO,WACLK,cAAcJ,MAEf,IAGAZ,KAAKiB,YAAUlB,IACfC,KAAKiB,YAAUzB,IACf0B,UAAU,CACTrB,KAAM,WACU,UAAVR,GACFE,GAAQ,SAAA4B,GAAI,OAAIA,EAAO,QAK/B,OAAO,WACLX,EAAcY,iBAEf,CAACzB,EAAQN,EAAOG,IAEjB,kCACE,cAAC,EAAD,CACEjB,KAAMA,EACNC,MAzDQ,WACZc,EAAS,UAyDLb,KAAMA,EACNC,MAAOA,EACPC,KAAMA,OC7DC0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c1c9eda0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Controls_header__-iia6\",\"container\":\"Controls_container___ni0C\",\"button\":\"Controls_button__31jsY\"};","const setTimeFormat = totalSecs => {\n  const seconds = totalSecs % 60;\n  const minutes = Math.floor(totalSecs / 60);\n  const hours = Math.floor(totalSecs / 3600);\n  const hoursFormat =\n    hours < 1 || hours > 23\n      ? '00'\n      : hours >= 1 && hours <= 9\n      ? `0${hours}`\n      : `${hours}`;\n  const minutesFormat =\n    minutes < 10 ? (minutes === 0 ? '00' : `0${minutes}`) : `${minutes}`;\n  const secondsFormant = seconds < 10 ? `0${seconds}` : `${seconds}`;\n\n  return `${hoursFormat}:${minutesFormat}:${secondsFormant}`;\n};\n\nexport default setTimeFormat;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport setTimeFormat from '../../utils/timeFromat';\nimport s from './Controls.module.css';\n\nexport const Controls = ({ time, start, stop, reset, wait }) => (\n  <>\n    <header className={s.header}>\n      <h1>StopWatch</h1>\n      <h1>{setTimeFormat(time)}</h1>\n    </header>\n    <section>\n      <div className={s.container}>\n        <button type=\"button\" className={s.button} onClick={start}>\n          Start\n        </button>\n        <button type=\"button\" className={s.button} onClick={stop}>\n          Stop\n        </button>\n        <button type=\"button\" className={s.button} onClick={reset}>\n          Reset\n        </button>\n        <button type=\"button\" className={s.button} onClick={wait}>\n          Wait\n        </button>\n      </div>\n    </section>\n  </>\n);\n\nControls.propTypes = {\n  time: PropTypes.number.isRequired,\n  start: PropTypes.func.isRequired,\n  stop: PropTypes.func.isRequired,\n  reset: PropTypes.func.isRequired,\n  wait: PropTypes.func.isRequired,\n};\n","import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { Controls } from './components/Controls';\nimport { Observable, Subject } from 'rxjs';\nimport { map, buffer, debounceTime, filter, takeUntil } from 'rxjs/operators';\nimport './App.css';\n\nfunction App() {\n  const [state, setState] = useState('stop');\n  const [time, setTime] = useState(0);\n\n  const stop$ = useMemo(() => new Subject(), []);\n  const click$ = useMemo(() => new Subject(), []);\n\n  const start = () => {\n    setState('start');\n  };\n\n  const stop = useCallback(() => {\n    setTime(0);\n    setState('stop');\n  }, []);\n\n  const reset = useCallback(() => {\n    setTime(0);\n  }, []);\n\n  const wait = useCallback(() => {\n    click$.next();\n    setState('wait');\n    click$.next();\n  }, [click$]);\n\n  useEffect(() => {\n    const doubleClick$ = click$.pipe(\n      buffer(click$.pipe(debounceTime(300))),\n      map(list => list.length),\n      filter(value => value >= 2),\n    );\n    const timer$ = new Observable(observer => {\n      let count = 0;\n\n      const intervalId = setInterval(() => {\n        observer.next((count += 1));\n        console.log(count);\n      }, 1000);\n\n      return () => {\n        clearInterval(intervalId);\n      };\n    }, []);\n\n    const subscribtion$ = timer$\n      .pipe(takeUntil(doubleClick$))\n      .pipe(takeUntil(stop$))\n      .subscribe({\n        next: () => {\n          if (state === 'start') {\n            setTime(prev => prev + 1);\n          }\n        },\n      });\n\n    return () => {\n      subscribtion$.unsubscribe();\n    };\n  }, [click$, state, stop$]);\n  return (\n    <section>\n      <Controls\n        time={time}\n        start={start}\n        stop={stop}\n        reset={reset}\n        wait={wait}\n      />\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}